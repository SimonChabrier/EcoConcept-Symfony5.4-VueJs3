[
    {
    "id": 1, "title": "Optimiser la taille des fichiers", 
    "body": "Utiliser des outils de minification pour réduire la taille des fichiers HTML, CSS et JavaScript afin de réduire le temps de chargement des pages et de limiter l'utilisation de la bande passante.", 
    "tag": "front", 
    "exemple": "Utiliser des outils tels que Minify ou Closure Compiler pour minifier les fichiers HTML, CSS et JavaScript avant de les mettre en ligne."
    },
    {"id": 2, "title": "Utiliser des images en format WebP", "body": "Utiliser des images en format WebP au lieu de formats traditionnels comme JPEG ou PNG pour réduire la taille des fichiers et améliorer les performances de l'application.", "tag": "front", "exemple": "Utiliser l'outil de conversion de Google pour convertir les images au format WebP avant de les intégrer à l'application."
    },
    {"id": 3, "title": "Utiliser un CDN", "body": "Utiliser un Content Delivery Network (CDN) pour servir les fichiers statiques (images, fichiers CSS, fichiers JavaScript, etc.) afin de réduire la charge sur le serveur et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser un service de CDN tel que Cloudflare ou Akamai pour servir les fichiers statiques de l'application."
    },
    {"id": 4, "title": "Utiliser un cache de navigateur", "body": "Utiliser un cache de navigateur pour stocker les fichiers statiques de l'application afin de réduire le temps de chargement des pages et de limiter l'utilisation de la bande passante.", "tag": "front", "exemple": "Utiliser des en-têtes HTTP tels que Cache-Control ou Expires pour indiquer au navigateur quels fichiers peuvent être mis en cache et pour combien de temps."
    },
    {"id": 5, "title": "Optimiser les requêtes serveur", "body": "Optimiser les requêtes serveur en utilisant des techniques telles que le filtrage, le tri et l'agrégation afin de réduire le nombre de requêtes nécessaires et améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des indexes dans la base de données pour améliorer les performances des requêtes de sélection, ou utiliser des agrégats pour réduire le nombre de lignes renvoyées par une requête."
    },
    {"id": 6, "title": "Optimiser les requêtes client", "body": "Optimiser les requêtes client en utilisant des techniques telles que la mise en cache côté client ou la délégation de certaines tâches au client afin de réduire le nombre de requêtes nécessaires et améliorer les performances de l'application.", "tag": "front", "exemple": "Utiliser des en-têtes HTTP tels que ETag ou Last-Modified pour mettre en cache côté client les réponses aux requêtes, ou utiliser des techniques de délégation de traitement telles que le MapReduce pour déléguer certaines tâches au client."
    },
    {"id": 7, "title": "Utiliser une architecture éco-responsable", "body": "Utiliser une architecture éco-responsable qui permet de répartir la charge de traitement sur plusieurs serveurs et de réduire la consommation d'énergie.", "tag": "back", "exemple": "Utiliser une architecture de type microservices ou de type conteneurisée pour répartir la charge de traitement sur plusieurs serveurs."
    },
    {"id": 8, "title": "Utiliser un système de gestion de la consommation d'énergie", "body": "Utiliser un système de gestion de la consommation d'énergie qui permet de surveiller et de réguler la consommation d'énergie des serveurs et des équipements informatiques afin de réduire la consommation d'énergie et de protéger l'environnement.", "tag": "back", "exemple": "Utiliser un outil de gestion de la consommation d'énergie tel que IPMI ou PDU pour surveiller et réguler la consommation d'énergie des serveurs et des équipements informatiques."
    },
    {"id": 9, "title": "Utiliser des technologies éco-responsables", "body": "Utiliser des technologies éco-responsables qui permettent de réduire la consommation d'énergie et de protéger l'environnement.", "tag": "back", "exemple": "Utiliser des technologies telles que le Cloud computing ou l'edge computing pour externaliser la gestion de la consommation d'énergie et réduire l'empreinte écologique de l'application."
    },
    {"id": 10, "title": "Mesurer et surveiller l'impact écologique de l'application", "body": "Mesurer et surveiller l'impact écologique de l'application afin de pouvoir identifier les points de progrès et de mettre en place des actions pour réduire cet impact.", "tag": "back", "exemple": "Utiliser des outils de mesure de l'empreinte carbone tels que Carbon Footprint ou Greenhouse Gas Protocol pour mesurer l'impact écologique de l'application et mettre en place des actions pour le réduire."
    },
    {"id": 11, "title": "Utiliser des frameworks modernes et performants", "body": "Utiliser des frameworks modernes et performants qui permettent de développer rapidement et efficacement une application web moderne.", "tag": "back", "exemple": "Utiliser des frameworks tels que React ou Angular pour le développement de l'interface utilisateur, ou utiliser des frameworks tels que Flask ou Django pour le développement du backend."
    },
    {"id": 12, "title": "Utiliser une architecture moderne et scalable", "body": "Utiliser une architecture moderne et scalable qui permet de développer une application qui s'adapte aux besoins de l'utilisateur et qui peut évoluer facilement au fil du temps.", "tag": "back", "exemple": "Utiliser une architecture de type microservices ou de type conteneurisée pour développer une application qui peut être facilement déployée et mise à l'échelle en fonction des besoins de l'utilisateur."
    },
    {"id": 13, "title": "Utiliser des outils de développement modernes et efficaces", "body": "Utiliser des outils de développement modernes et efficaces qui permettent de développer rapidement et de manière collaborative une application web moderne.", "tag": "back", "exemple": "Utiliser des outils de gestion de versions tels que Git ou Mercurial pour gérer le code source de l'application, ou utiliser des outils de gestion de projet tels que JIRA ou Asana pour suivre l'avancement du développement de l'application."
    },
    {"id": 14, "title": "Optimiser l'expérience utilisateur", "body": "Optimiser l'expérience utilisateur en proposant un parcours fluide et en limitant les temps de chargement des pages pour réduire l'utilisation de la bande passante et l'impact environnemental de l'application.", "tag": "front", "exemple": "Utiliser des techniques de chargement différé pour ne charger que les éléments nécessaires au parcours de l'utilisateur, ou utiliser des techniques de compression pour réduire la taille des fichiers transmis entre le serveur et le client."
    },
    {"id": 15, "title": "Utiliser des interfaces utilisateur éco-responsables", "body": "Utiliser des interfaces utilisateur éco-responsables qui permettent de réduire l'impact environnemental de l'application en limitant l'utilisation de ressources et en proposant un design épuré et éco-responsable.", "tag": "front", "exemple": "Utiliser des interfaces utilisateur qui ne nécessitent pas de plugin ou de logiciel externe pour fonctionner, ou utiliser des interfaces qui respectent les principes de l'accessibilité et de l'inclusion."
    },
    {"id": 16, "title": "Promouvoir l'adoption de bonnes pratiques écologiques", "body": "Promouvoir l'adoption de bonnes pratiques écologiques au sein de l'application en proposant des fonctionnalités qui encouragent l'utilisateur à adopter des comportements éco-responsables.", "tag": "front", "exemple": "Utiliser des fonctionnalités de tracking de l'empreinte carbone pour sensibiliser l'utilisateur à son impact environnemental, ou mettre en place des systèmes de gamification pour encourager l'utilisateur à adopter des comportements éco-responsables."
    },
    {"id": 17, "title": "Utiliser des technologies éco-responsables", "body": "Utiliser des technologies éco-responsables qui permettent de réduire l'impact environnemental de l'application et de promouvoir une économie circulaire.", "tag": "back", "exemple": "Utiliser des technologies telles que le Cloud computing ou l'edge computing pour externaliser la gestion de la consommation d'énergie et réduire l'empreinte écologique de l'application."
    },
    {"id": 18, "title": "Mesurer et surveiller l'impact écologique de l'application", "body": "Mesurer et surveiller l'impact écologique de l'application afin de pouvoir identifier les points de progrès et de mettre en place des actions pour réduire cet impact.", "tag": "back", "exemple": "Utiliser des outils de mesure de l'empreinte carbone tels que Carbon Footprint ou Greenhouse Gas Protocol pour mesurer l'impact écologique de l'application et mettre en place des actions pour le réduire."
    },
    {"id": 19, "title": "Utiliser des polices de caractères éco-responsables", "body": "Utiliser des polices de caractères éco-responsables qui permettent de réduire l'impact environnemental de l'application et de promouvoir une économie circulaire.", "tag": "front", "exemple": "Utiliser des polices de caractères gratuites et open source telles que Open Sans ou Lato qui respectent les principes de l'économie circulaire et qui sont optimisées pour le web."
    },
    {"id": 20, "title": "Limiter le nombre de polices de caractères utilisées", "body": "Limiter le nombre de polices de caractères utilisées afin de réduire la taille des fichiers et de limiter l'utilisation de la bande passante.", "tag": "front", "exemple": "Limiter le nombre de polices de caractères utilisées dans l'application à 2 ou 3 au maximum, en privilégiant des polices polyvalentes qui s'adaptent à différents contextes et usages."
    },
    {"id": 21, "title": "Optimiser les requêtes SQL", "body": "Optimiser les requêtes SQL ou DQL afin de réduire le temps d'exécution et de limiter l'utilisation de ressources serveur.", "tag": "back", "exemple": "Utiliser des index pour accélérer les requêtes, ou utiliser des jointures judicieusement pour limiter le nombre de requêtes nécessaires."
    },
    {"id": 22, "title": "Limiter le nombre de requêtes SQL", "body": "Limiter le nombre de requêtes SQL ou DQL en utilisant des techniques de cache ou en préchargeant les données pour réduire l'utilisation de ressources serveur.", "tag": "back", "exemple": "Utiliser des techniques de cache telles que Redis ou Memcached pour mettre en cache les résultats de requêtes fréquemment exécutées, ou précharger les données dans des structures de données en mémoire pour éviter de devoir exécuter des requêtes à chaque demande de l'utilisateur."
    },
    {"id": 23, "title": "Utiliser les bons types de données", "body": "Utiliser les bons types de données pour stocker les informations dans la base de données afin de réduire la taille des fichiers et d'optimiser les performances de la base de données.", "tag": "back", "exemple": "Utiliser des types de données tels que INT ou VARCHAR plutôt que des types de données plus lourds tels que BLOB ou TEXT lorsque cela est possible."
    },
    {"id": 24, "title": "Optimiser la structure de la base de données", "body": "Optimiser la structure de la base de données en utilisant des clés étrangères et en créant des indexes judicieusement afin de réduire le temps d'exécution des requêtes et d'optimiser les performances de la base de données.", "tag": "back", "exemple": "Utiliser des clés étrangères pour créer des relations entre les tables de la base de données et éviter les doublons, ou créer des indexes sur les champs fréquemment utilisés dans les requêtes pour accélérer leur exécution."
    },
    {"id": 25, "title": "Choisir un hébergeur éco-responsable", "body": "Choisir un hébergeur éco-responsable qui utilise des technologies écologiques et qui a une politique de développement durable.", "tag": "back", "exemple": "Choisir un hébergeur qui utilise des centres de données éco-responsables alimentés en énergie renouvelable, ou qui a mis en place des programmes de compensation carbone pour compenser l'empreinte carbone de ses activités."
    },
    {"id": 26, "title": "Optimiser l'utilisation des ressources de l'hébergeur", "body": "Optimiser l'utilisation des ressources de l'hébergeur en utilisant des technologies telles que le Cloud computing ou l'edge computing pour externaliser la gestion de la consommation d'énergie et réduire l'empreinte écologique de l'application.", "tag": "back", "exemple": "Utiliser des technologies de Cloud computing telles que Amazon Web Services ou Microsoft Azure pour externaliser la gestion de la consommation d'énergie et réduire l'empreinte écologique de l'application, ou utiliser des technologies d'edge computing telles que Cloudflare pour réduire la distance entre les utilisateurs et les serveurs et accélérer les temps de chargement."
    },
    {"id": 27, "title": "Optimiser la vitesse de chargement des pages", "body": "Optimiser la vitesse de chargement des pages afin de réduire le temps d'attente de l'utilisateur et de limiter l'utilisation de la bande passante.", "tag": "front", "exemple": "Utiliser des outils de minification pour réduire la taille des fichiers HTML, CSS et JavaScript, ou utiliser des techniques de lazy loading pour ne charger les images et les vidéos qu'au moment où l'utilisateur en a besoin."
    },
    {"id": 28, "title": "Créer une interface utilisateur intuitive et facile à utiliser", "body": "Créer une interface utilisateur intuitive et facile à utiliser afin de simplifier l'expérience de l'utilisateur et de réduire le temps de formation et de familiarisation avec l'application.", "tag": "front", "exemple": "Utiliser des conventions d'interface utilisateur connues et éprouvées, ou utiliser des outils de test utilisateur pour évaluer la facilité d'utilisation de l'interface et identifier les points de progrès."
    },
    {"id": 29, "title": "Impliquer les utilisateurs dans le processus de conception", "body": "Impliquer les utilisateurs dans le processus de conception afin de prendre en compte leurs besoins et leurs attentes et de créer une application qui réponde véritablement à leurs attentes.", "tag": "front", "exemple": "Mener des entretiens avec les utilisateurs, organiser des focus groupes ou utiliser des techniques de design thinking pour inclure les utilisateurs dans le processus de conception de l'application."
    },
    {"id": 30, "title": "Tester l'application auprès d'utilisateurs avant la mise en production", "body": "Tester l'application auprès d'utilisateurs avant la mise en production afin de s'assurer que l'interface est intuitive et facile à utiliser, et d'identifier tout problème de performance ou de fonctionnement.", "tag": "front", "exemple": "Utiliser des outils de test utilisateur pour obtenir des retours d'utilisateurs sur l'application et identifier les points de progrès, ou utiliser des outils de test de performance pour mesurer les temps de chargement et identifier les goulots d'étranglement."
    },
    {"id": 31, "title": "Optimiser l'utilisation de la couleur", "body": "Optimiser l'utilisation de la couleur afin de réduire la consommation d'énergie et de simplifier l'interface pour l'utilisateur.", "tag": "front", "exemple": "Limiter le nombre de couleurs utilisées dans l'interface pour réduire la charge sur les processeurs et les écrans, utiliser des couleurs qui sont visuellement agréables et moins gourmandes en énergie, ou utiliser des palettes de couleurs prédéfinies pour garantir une harmonie visuelle et une utilisation optimale de l'énergie."
    },
    {"id": 32, "title": "Utiliser des polices de caractères lisibles et adaptées à l'interface", "body": "Utiliser des polices de caractères lisibles et adaptées à l'interface afin de faciliter la lecture et de rendre l'interface plus agréable à utiliser, tout en réduisant la consommation d'énergie.", "tag": "front", "exemple": "Utiliser des polices de caractères sans-serif pour le contenu principal, qui sont plus lisibles et moins gourmandes en énergie, ou utiliser des polices de caractères avec des traits épais pour les titres et les éléments visuels pour les mettre en valeur tout en limitant la consommation d'énergie."
    },
    {"id": 33, "title": "Optimiser la qualité et la taille des images", "body": "Optimiser la qualité et la taille des images afin de réduire le temps de chargement des pages et de limiter l'utilisation de la bande passante.", "tag": "front", "exemple": "Utiliser des outils de compression et de réduction de la taille des images pour réduire la taille des fichiers sans perdre en qualité, ou utiliser des techniques de lazy loading pour ne charger les images et les vidéos qu'au moment où l'utilisateur en a besoin."
    },
    {"id": 34, "title": "Utiliser des formats de médias adaptés et éco-responsables", "body": "Utiliser des formats de médias adaptés et éco-responsables afin de réduire l'empreinte écologique de l'application et de garantir une qualité optimale pour l'utilisateur.", "tag": "front", "exemple": "Utiliser des formats de médias ouverts et non-propriétaires tels que le format WebM pour les vidéos ou le format WebP pour les images, qui sont plus légers et moins gourmands en énergie que les formats propriétaires."
    },
    {"id": 35, "title": "Optimiser la réactivité de l'interface", "body": "Optimiser la réactivité de l'interface afin de rendre l'application agréable à utiliser et de réduire la consommation d'énergie.", "tag": "front", "exemple": "Utiliser des techniques de chargement différé pour ne charger les éléments de l'interface qu'au moment où ils sont nécessaires, ou utiliser des techniques de virtualisation pour limiter le nombre d'éléments affichés à l'écran en même temps."
    },
    {"id": 36, "title": "Utiliser des composants éco-responsables dans l'interface", "body": "Utiliser des composants éco-responsables dans l'interface afin de limiter l'impact environnemental de l'application et de garantir une expérience utilisateur agréable.", "tag": "front", "exemple": "Utiliser des composants de l'interface qui sont optimisés pour la performance et la consommation d'énergie, ou utiliser des composants qui sont basés sur des standards ouverts et éco-responsables."
    },
    {"id": 37, "title": "Optimiser la taille et la complexité des formulaires", "body": "Optimiser la taille et la complexité des formulaires afin de rendre l'application plus rapide et plus facile à utiliser, tout en réduisant la consommation d'énergie.", "tag": "front", "exemple": "Limiter le nombre de champs de formulaire et de pages de formulaire, utiliser des champs de formulaire pré-remplis et des éléments de formulaire personnalisés pour simplifier l'interface, ou utiliser des techniques de validation de données en temps réel pour éviter les soumissions de données incorrectes."
    },
    {"id": 38, "title": "Optimiser la soumission de données", "body": "Optimiser la soumission de données afin de réduire la consommation d'énergie et de simplifier l'interface pour l'utilisateur.", "tag": "front", "exemple": "Utiliser des techniques de transmission de données asynchrones pour ne soumettre que les données nécessaires et réduire la charge sur les processeurs, ou utiliser des techniques de compression de données pour réduire la taille des données transmises."
    },
    {"id": 39, "title": "Optimiser le traitement des données du formulaire", "body": "Optimiser le traitement des données du formulaire afin de réduire la consommation d'énergie et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des techniques de vérification de données en temps réel pour éviter les traitements inutiles, ou utiliser des techniques de traitement par lots pour regrouper les traitements de données et réduire la charge sur les processeurs."
    },
    {"id": 40, "title": "Optimiser le stockage et la gestion des données", "body": "Optimiser le stockage et la gestion des données afin de réduire l'empreinte écologique de l'application et de garantir une qualité de service optimale pour l'utilisateur.", "tag": "back", "exemple": "Utiliser des bases de données ouvertes et éco-responsables pour stocker les données, ou utiliser des techniques de compression et de gestion efficace des données pour réduire la taille des données stockées et améliorer les performances de l'application."
    },
    {"id": 41, "title": "Optimiser la taille et le nombre de fichiers joints", "body": "Optimiser la taille et le nombre de fichiers joints afin de réduire la consommation d'énergie et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Limiter la taille et le nombre de fichiers joints, utiliser des techniques de compression de fichiers pour réduire la taille des fichiers, ou utiliser des techniques de traitement par lots pour regrouper le traitement de plusieurs fichiers."
    },
    {"id": 42, "title": "Utiliser des formats de fichiers éco-responsables", "body": "Utiliser des formats de fichiers éco-responsables afin de réduire l'empreinte écologique de l'application et de garantir une qualité optimale pour l'utilisateur.", "tag": "back", "exemple": "Utiliser des formats de fichiers ouverts et non-propriétaires pour les fichiers joints, qui sont plus légers et moins gourmands en énergie que les formats propriétaires."
    },
    {"id": 43, "title": "Utiliser des balises sémantiques", "body": "Utiliser des balises sémantiques afin de rendre le code HTML plus lisible et plus facile à comprendre pour les humains et les machines, tout en réduisant la consommation d'énergie.", "tag": "front", "exemple": "Utiliser des balises de titres, de paragraphes, de listes et d'autres balises sémantiques au lieu de div et de span pour structurer le contenu de l'application."
    },
    {"id": 44, "title": "Optimiser la longueur et la complexité du code HTML", "body": "Optimiser la longueur et la complexité du code HTML afin de rendre l'application plus rapide et plus facile à maintenir, tout en réduisant la consommation d'énergie.", "tag": "front", "exemple": "Utiliser des frameworks comme React, Angular ou Vue pour générer du code HTML optimisé, ou utiliser des librairies comme Handlebars ou Mustache pour créer des templates HTML modifiables et réutilisables."
    },
    {"id": 45, "title": "Utiliser un préprocesseur de feuilles de style", "body": "Utiliser un préprocesseur de feuilles de style afin de rendre le code CSS plus lisible et plus facile à maintenir, tout en réduisant la consommation d'énergie.", "tag": "front", "exemple": "Utiliser des préprocesseurs de feuilles de style tels que Sass, Less ou Stylus pour ajouter des fonctionnalités avancées au CSS et rendre le code plus concis et plus maintenable."
    },
    {"id": 46, "title": "Utiliser un framework CSS", "body": "Utiliser un framework CSS afin de simplifier le développement de l'interface utilisateur et de réduire la consommation d'énergie en utilisant des code pré-écrit et testé, et en limitant les ressources serveur et client nécessaires à la gestion de l'interface.", "tag": "front", "exemple": "Utiliser des frameworks CSS tels que Bootstrap, Foundation ou Materialize pour ajouter rapidement une structure et une apparence professionnelles à l'application, ou utiliser des frameworks CSS spécialisés tels que Bulma ou Semantic UI pour ajouter des éléments spécifiques à l'interface."
    },
    {"id": 47, "title": "Utiliser le type de données le plus adapté", "body": "Utiliser le type de données le plus adapté afin de réduire la consommation de mémoire et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des types de données spécifiques pour les nombres (comme 'INT' ou 'DECIMAL'), pour les chaînes de caractères (comme 'VARCHAR' ou 'TEXT'), pour les dates (comme 'DATE' ou 'DATETIME') et pour les booléens (comme 'BOOLEAN' ou 'BIT') afin de stocker les données de manière optimale."
    },
    {"id": 48, "title": "Utiliser l'indexation efficacement", "body": "Utiliser l'indexation efficacement afin de réduire la consommation de mémoire et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des index pour les colonnes qui sont fréquemment utilisées dans les requêtes de sélection, d'ordre ou de jointure, mais éviter d'utiliser des index pour les colonnes qui sont rarement utilisées ou qui sont souvent mises à jour, afin de limiter l'utilisation de la mémoire et de l'espace disque."
    },
    {"id": 47, "title": "Utiliser la pagination", "body": "Utiliser la pagination afin de limiter le nombre de résultats affichés à la fois, et de réduire la charge sur le serveur et sur l'interface utilisateur.", "tag": "back+front", "exemple": "Utiliser des boutons ou des liens de navigation pour permettre à l'utilisateur de parcourir les résultats par tranches de X enregistrements, plutôt que de tous les afficher en une seule fois."
    },
    {"id": 48, "title": "Utiliser des requêtes préparées", "body": "Utiliser des requêtes préparées afin de réduire la consommation de mémoire et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des requêtes préparées pour les requêtes qui sont exécutées plusieurs fois, afin de réduire la consommation de mémoire et d'améliorer les performances de l'application."
    },
    {"id": 49, "title": "Utiliser des requêtes paramétrées", "body": "Utiliser des requêtes paramétrées afin de réduire la consommation de mémoire et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des requêtes paramétrées pour les requêtes qui sont exécutées plusieurs fois, afin de réduire la consommation de mémoire et d'améliorer les performances de l'application."
    },
    {"id": 50, "title": "Utiliser des requêtes asynchrones", "body": "Utiliser des requêtes asynchrones afin de réduire la consommation de mémoire et d'améliorer les performances de l'application.", "tag": "back", "exemple": "Utiliser des requêtes asynchrones pour les requêtes qui sont exécutées plusieurs fois, afin de réduire la consommation de mémoire et d'améliorer les performances de l'application."
    }
]